sockets

  how does player leaving need to work at heroku with long polling?

  server
    listen to move, take existing params
    emit result on game id
      for invalid moves, will have to ignore for the non-moving player

  client
    connect on page load

    player
      emit to move with existing params
      listen on game id
      need to have login so people have a list of games they're playing
        this is so:
          random people can observe, whereas only the players can play (and resume)
          client knows which color to play as

    observer
      listen on game id


performance
  got slow with the newer in-check calcs
  why so much slower?
    object creation?


sever side

  state model
    has a state string
    tracks whos turn it is
    has function that returns rule set based on current state
    has function that returns rule changes based on move?

  game model
    has a current state obj

  move object?
    piece
    from coord
    to coord

  rule model
    has movement description
      piece type
      piece color
      coordinate transform
    has state transformation functions
      piece movement
      postprocessing


api

  post to game:
    request: ???
    response: {
      id: id,
      state: same as response from posting to turn?
    }

  post to turn

    request: {
      state: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      move: {
        from: '',
        to:   '',
      }
    }

    response: {
      //While the full state does not seem necessary, it is necessary to support both game resumption and rules that may create pieces
      state: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',

      last_move: {
        from: '',
        to:   ''
      },

      //Maybe include valid moves for both players, so waiting player can hover and see affects of rule changes easily
      valid_moves: {
        'key is from-coord to make piece lookups easy': {
          'key is to-coord': {

            //Include full new state to support rules that create pieces
            state: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',

            rules {
              enabled: [{
                id: '',
                name: ''
              }, ...],
              disabled: [{
                id: '',
                name: ''
              }, ...]
            }
          }
        }, ...
      }

      //Maybe include rules for all positions of all pieces from current state, so users can plan ahead
      //But unless rules are limited to 'this piece type is here' and not the global board state, would actually need a full rule set client-side, hmm
    }


client side

	user picks up piece
		valid moves are displayed (or maybe on hover, whatever)

	user drops piece on invalid position
		dont send anything to server

	user drops piece on valid position
		send current state string and the new move
      post to turn
		validate server-side to prevent any cheating

		respond with new valid states and enabled rules
			how does this look?
			sending back the raw state string makes things ugly client side, doesnt it?
			so send back valid piece moves AND ASSOCIATED RULE CHANGES in a more verbose way
		send same response to other player
			websockets?

wishlist
	very cool
		user defined rule sets
		ai - find an open source and modify to take advantage of changing rules
		api so others can write ais
			pubsub to recieve move data, or they can connect and get latest state
		ai vs ai games

	features
		game resumption
		game lobby
		view other peoples games in progress
		game history (including all moves)
		chatting in game
		accounts
		game invites, ranking stuff
